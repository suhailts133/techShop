<% layout("../layouts/adminboilerplate") %>
<title><%= title %></title>

<h1>Admin Dashboard</h1>

<section class="sales-report">
    <h2>Sales Report</h2>
  
    <form id="salesReportForm" class="report-controls">
      <div class="form-group">
        <label for="periodSelect">Report Period:</label>
        <select name="period" id="periodSelect" class="form-control">
          <option value="daily">Daily</option>
          <option value="weekly">Weekly</option>
          <option value="monthly">Monthly</option>
          <option value="yearly">Yearly</option>
          <option value="custom">Custom Range</option>
        </select>
      </div>
  
      <div id="customDateRange" style="display: none;">
        <div class="form-group">
          <label for="startDate">Start Date:</label>
          <input type="date" id="startDate" name="startDate">
        </div>
        <div class="form-group">
          <label for="endDate">End Date:</label>
          <input type="date" id="endDate" name="endDate">
        </div>
      </div>
  
      <div class="form-buttons">
        <button type="submit" class="btn btn-primary">Generate Report</button>
        <!-- You may keep your download buttons separately if needed -->
        <button type="submit" name="download" value="excel" class="btn btn-success">Export Excel</button>
        <button type="submit" name="download" value="pdf" class="btn btn-danger">Export PDF</button>
      </div>
    </form>
  </section>
  
  <!-- Container for Summary Cards -->
  <div id="reportSummary"></div>
  
  
  <!-- Chart Container -->
  <div class="chart-container" style="position: relative; height: 400px; width: 100%;">
    <canvas id="salesChart"></canvas>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  
  document.getElementById('periodSelect').addEventListener('change', (e) => {
  const customDateRange = document.getElementById('customDateRange');
  const startDateField = document.getElementById('startDate');
  const endDateField = document.getElementById('endDate');
  
  if (e.target.value === 'custom') {
    customDateRange.style.display = 'block';
    startDateField.disabled = false;
    endDateField.disabled = false;
    startDateField.required = true;
    endDateField.required = true;
  } else {
    customDateRange.style.display = 'none';
  
    startDateField.disabled = true;
    endDateField.disabled = true;
    startDateField.required = false;
    endDateField.required = false;
  }
});
  let salesChart;
  function updateReportSummary(report, startDate, endDate) {
    const summaryContainer = document.getElementById('reportSummary');
    summaryContainer.innerHTML = `
      <h3>Report from ${startDate} to ${endDate}</h3>
      <div class="summary-cards">
        <div class="card">
          <h4>Total Orders</h4>
          <p>${report.totalSales}</p>
        </div>
        <div class="card">
          <h4>Total Sales</h4>
          <p>₹${Number(report.totalAmount).toFixed(2)}</p>
        </div>
        <div class="card">
          <h4>Total Discounts</h4>
          <p>₹${Number(report.totalDiscount).toFixed(2)}</p>
        </div>
        <div class="card">
          <h4>Coupons Used</h4>
          <p>${report.couponsUsed}</p>
        </div>
      </div>
    `;
  }

  // Function to update the table.
 

  // Function to update (or create) the chart.
  function updateChart(chartReport) {
    const ctx = document.getElementById('salesChart').getContext('2d');
    const labels = chartReport.map(entry => entry._id);
    const data = chartReport.map(entry => entry.totalAmount);

    if (salesChart) {
      // Update existing chart
      salesChart.data.labels = labels;
      salesChart.data.datasets[0].data = data;
      salesChart.update();
    } else {
      // Create new chart
      salesChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: 'Sales Amount',
            data: data,
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Sales Amount (₹)'
              }
            },
            x: {
              title: {
                display: true,
                text: 'Date'
              }
            }
          },
          plugins: {
            tooltip: {
              callbacks: {
                label: function(context) {
                  return '₹' + context.raw.toFixed(2);
                }
              }
            }
          }
        }
      });
    }
  }

  
  async function fetchSalesReport() {
    try {
      
      const period = document.getElementById('periodSelect').value;
      let startDate = document.getElementById('startDate').value;
      let endDate = document.getElementById('endDate').value;
      if (period !== 'custom') {
        startDate = '';
        endDate = '';
      }
      const response = await fetch(`/admin/sales-report?period=${period}&startDate=${startDate}&endDate${endDate}`);
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const data = await response.json();
      updateReportSummary(data.report, data.startDate, data.endDate);
   
      updateChart(data.chartReport);
    } catch (error) {
      console.error('Error fetching sales report data:', error);
    }
  }

  document.getElementById('salesReportForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const submitter = e.submitter;
    const period = document.getElementById('periodSelect').value;
    let startDate = document.getElementById('startDate').value;
    let endDate = document.getElementById('endDate').value;
    if (period !== 'custom') {
      startDate = '';
      endDate = '';
    }
  if (submitter && submitter.name === 'download') {
      const downloadType = submitter.value; 
      const downloadUrl = `/admin/sales-report?period=${period}&startDate=${startDate}&endDate=${endDate}&download=${downloadType}`;
      window.location.href = downloadUrl;
    } else {
      
      await fetchSalesReport();
    }
  });
    

  document.addEventListener('DOMContentLoaded', () => {
    fetchSalesReport();
  });
</script>


<style>
    .sales-report {
        padding: 20px;
        background: #f8f9fa;
        border-radius: 8px;
        margin: 20px 0;
    }
    .form-group {
        margin: 10px 0;
    }
    .form-control {
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #ddd;
    }
    .summary-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin: 20px 0;
    }
    .card {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .form-buttons {
        margin: 15px 0;
        display: flex;
        gap: 10px;
    }
    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    .btn-primary { background: #007bff; color: white; }
    .btn-success { background: #28a745; color: white; }
</style>
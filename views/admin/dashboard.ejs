<% layout("../layouts/adminboilerplate") %>
<title><%= title %></title>

<style>

  .main-content {
      background-color: var(--primary-light);
      padding: 2rem;
  }

  h1, h2, h3, h4 {
      color: var(--text-light);
  }

  .sales-report {
      padding: 2rem;
      background: var(--primary-color);
      border-radius: 12px;
      margin: 20px 0;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  }

  .form-group {
      margin: 15px 0;
  }

  .form-control {
      padding: 10px;
      border-radius: 8px;
      border: 1px solid var(--border-color);
      background-color: var(--primary-light);
      color: var(--text-light);
  }

  .form-control:focus {
      border-color: var(--accent-color);
      box-shadow: 0 0 0 0.2rem rgba(163, 184, 153, 0.25);
  }

  label {
      color: var(--text-light);
      font-weight: 500;
      margin-bottom: 8px;
  }

  .summary-cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 20px;
      margin: 25px 0;
  }

  .card {
      background: var(--primary-color);
      padding: 1.5rem;
      border-radius: 12px;
      border: none;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  }

  .card h4 {
      color: var(--text-muted);
      font-size: 0.9rem;
      margin-bottom: 10px;
  }

  .card p {
      color: var(--text-light);
      font-size: 1.5rem;
      font-weight: 600;
      margin: 0;
  }

  .form-buttons {
      margin: 20px 0;
      display: flex;
      gap: 15px;
      flex-wrap: wrap;
  }

  .btn {
      padding: 10px 20px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-weight: 500;
  }

  .btn-primary {
      background-color: var(--accent-color);
      color: var(--primary-color);
  }

  .btn-primary:hover {
      background-color: var(--text-muted);
  }

  .btn-success {
      background-color: var(--success-color);
      color: var(--primary-color);
  }

  .btn-success:hover {
      background-color: var(--text-muted);
  }

  .btn-danger {
      background-color: var(--error-color);
      color: var(--primary-color);
  }

  .btn-danger:hover {
      background-color: var(--text-muted);
  }

  .chart-container {
      background: var(--primary-color);
      padding: 1.5rem;
      border-radius: 12px;
      margin-top: 2rem;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  }

  #customDateRange {
      background: var(--primary-light);
      padding: 15px;
      border-radius: 8px;
      margin-top: 15px;
  }

  input[type="date"] {
      background-color: var(--primary-color);
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 8px;
      color: var(--text-light);
  }

  input[type="date"]:focus {
      border-color: var(--accent-color);
      outline: none;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
      .sales-report {
          padding: 1rem;
      }

      .summary-cards {
          grid-template-columns: 1fr;
      }

      .form-buttons {
          flex-direction: column;
      }

      .btn {
          width: 100%;
      }
  }
</style>


<main class="main-content">
  <%- include("../partials/flash.ejs") %>
  
<h1>Admin Dashboard</h1>

<section class="sales-report">
    <h2>Sales Report</h2>
  
    <form id="salesReportForm" class="report-controls">
      <div class="form-group">
        <label for="periodSelect">Report Period:</label>
        <select name="period" id="periodSelect" class="form-control">
          <option value="daily">Daily</option>
          <option value="weekly">Weekly</option>
          <option value="monthly">Monthly</option>
          <option value="yearly">Yearly</option>
          <option value="custom">Custom Range</option>
        </select>
      </div>
  
      <div id="customDateRange" style="display: none;">
        <div class="form-group">
          <label for="startDate">Start Date:</label>
          <input type="date" id="startDate" name="startDate">
        </div>
        <div class="form-group">
          <label for="endDate">End Date:</label>
          <input type="date" id="endDate" name="endDate">
        </div>
      </div>
  
      <div class="form-buttons">
        <button type="submit" class="btn btn-primary">Generate Report</button>
        <!-- You may keep your download buttons separately if needed -->
        <button type="submit" name="download" value="excel" class="btn btn-success">Export Excel</button>
        <button type="submit" name="download" value="pdf" class="btn btn-danger">Export PDF</button>
      </div>
    </form>
  </section>
  
  <!-- Container for Summary Cards -->
  <div id="reportSummary"></div>
  
  
  <!-- Chart Container -->
  <div class="chart-container" style="position: relative; height: 400px; width: 100%;">
    <canvas id="salesChart"></canvas>
  </div>
</main>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const today = new Date().toISOString().split("T")[0];
    document.getElementById("startDate").setAttribute("max", today);
    document.getElementById("endDate").setAttribute("max", today);
    fetchSalesReport();
  });
  document.getElementById('periodSelect').addEventListener('change', (e) => {
  const customDateRange = document.getElementById('customDateRange');
  const startDateField = document.getElementById('startDate');
  const endDateField = document.getElementById('endDate');
  
  if (e.target.value === 'custom') {
    customDateRange.style.display = 'block';
    startDateField.disabled = false;
    endDateField.disabled = false;
    startDateField.required = true;
    endDateField.required = true;
  } else {
    customDateRange.style.display = 'none';
  
    startDateField.disabled = true;
    endDateField.disabled = true;
    startDateField.required = false;
    endDateField.required = false;
  }
});
  let salesChart;
  function updateReportSummary(report, startDate, endDate) {
    const summaryContainer = document.getElementById('reportSummary');
    summaryContainer.innerHTML = `
      <h3>Report from ${startDate} to ${endDate}</h3>
      <div class="summary-cards">
        <div class="card">
          <h4>Total Orders</h4>
          <p>${report.totalSales}</p>
        </div>
        <div class="card">
          <h4>Total Sales</h4>
          <p>₹${Number(report.totalAmount).toFixed(2)}</p>
        </div>
        <div class="card">
          <h4>Total Discounts</h4>
          <p>₹${Number(report.totalDiscount).toFixed(2)}</p>
        </div>
        <div class="card">
          <h4>Coupons Used</h4>
          <p>${report.couponsUsed}</p>
        </div>
      </div>
    `;
  }

  function updateChart(chartReport) {
    const ctx = document.getElementById('salesChart').getContext('2d');
    const labels = chartReport.map(entry => entry._id);
    const data = chartReport.map(entry => entry.totalAmount);

    if (salesChart) {
     
      salesChart.data.labels = labels;
      salesChart.data.datasets[0].data = data;
      salesChart.update();
    } else {
      
      salesChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: 'Sales Amount',
            data: data,
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Sales Amount (₹)'
              }
            },
            x: {
              title: {
                display: true,
                text: 'Date'
              }
            }
          },
          plugins: {
            tooltip: {
              callbacks: {
                label: function(context) {
                  return '₹' + context.raw.toFixed(2);
                }
              }
            }
          }
        }
      });
    }
  }
  async function fetchSalesReport() {
    try {
      const period = document.getElementById('periodSelect').value;
      let startDate = document.getElementById('startDate').value;
      let endDate = document.getElementById('endDate').value;
      if (period !== 'custom') {
        startDate = '';
        endDate = '';
      }
      const response = await fetch(`/admin/sales-report?period=${period}&startDate=${startDate}&endDate${endDate}`);
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const data = await response.json();
      updateReportSummary(data.report, data.startDate, data.endDate);
      updateChart(data.chartReport);
    } catch (error) {
      console.error('Error fetching sales report data:', error);
    }
  }

  document.getElementById('salesReportForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const submitter = e.submitter;
    const period = document.getElementById('periodSelect').value;
    let startDate = document.getElementById('startDate').value;
    let endDate = document.getElementById('endDate').value;
    if (period !== 'custom') {
      startDate = '';
      endDate = '';
    }
  if (submitter && submitter.name === 'download') {
      const downloadType = submitter.value; 
      const downloadUrl = `/admin/sales-report?period=${period}&startDate=${startDate}&endDate=${endDate}&download=${downloadType}`;
      window.location.href = downloadUrl;
    } else {
      
      await fetchSalesReport();
    }
  });
    

  document.addEventListener('DOMContentLoaded', () => {
    fetchSalesReport();
  });
</script>


<style>
    .sales-report {
        padding: 20px;
        background: #f8f9fa;
        border-radius: 8px;
        margin: 20px 0;
    }
    .form-group {
        margin: 10px 0;
    }
    .form-control {
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #ddd;
    }
    .summary-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin: 20px 0;
    }
    .card {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .form-buttons {
        margin: 15px 0;
        display: flex;
        gap: 10px;
    }
    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    .btn-primary { background: #007bff; color: white; }
    .btn-success { background: #28a745; color: white; }
</style>